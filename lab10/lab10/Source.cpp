#include <iostream>
using namespace std;
//13. Задано  масив  з  3  байт.Розглядаючи  його, 
//як  масив  з  24  біт, порахувати кількість 
//одиночних одиниць в оточенні нулів.Кінець
//послідовності розглядати як нуль.
#include <iostream>
using namespace std;

int main() {
	char arr[3] = { 2 , 4 , 6 }; //	2 = 0010 4 = 0100 6 = 0110
	int res = 0;			//  очікується 2

	_asm {
		mov ecx, 3	// кількість проходів циклу
		mov al, 1	// маска
		xor dl, dl	// обнулення 
		xor dh, dh
		xor bl, bl
		start_outer :
			mov bh, 8 // кількість проходів внутрішнього циклу
		start_in :
			mov ah, arr[ecx - 1]
			and ah, al // накладання маски
			jnz go_next  // якщо результат == 0
			cmp dh, 0 // порівняння елементів
			jne go_next  // якщо dh != 0 
			cmp bl, 0 // порівняння елементів
			je go_next  // якщо bl == 0 
			inc res // збільшуємо лічильник якщо умови  виконано
		go_next :
			mov bl, dl  
			mov dl, dh 
			mov dh, ah 
			shl al, 1 // зсув на 1 біт
			dec bh // зменшую к-сть проходів
			test bh, bh // перевірка чи пройдено 8 бітів елемента
			jnz start_in // якщо ні то продовжуєм
		loop start_outer // закінчення зовнішнього циклу
	}
	cout << res << endl;

	return 0;
}
	
/*
int main() {
	__int32 arr = 848843586; // (0011 0010 1001 1000
						     // 0101 0011 0100 0010)
	__int32 res = 0;
	__asm {
		mov cx, 8 // кількість проходів циклу
		mov eax, 1 // маска
		start_outer: // початок зовнішнього циклу (по словах)
		mov bx, 4 // кількість проходів внутрішнього циклу 
		xor di, di // обнулення лічильника одиниць
		start_inner:// початок внутрішного циклу (по бітах)
		mov edx, arr 
		and edx, eax // накладання маски
		jz go_next// якщо результат — 0
		inc di// якщо результат — 1, збільшуємо лічильник
		go_next:
		shl eax, 1// побітовий зсув вліво на 1 біт
		dec bx// зменшуємо лічильник проходів на 1
		test bx, bx// перевіряємо умову завершення циклу
		jnz start_inner// повторюємо цикл, якщо результат не 0
		and di, 1// перевірка на парність
		jnz end_// якщо непарне
		inc res// якщо парне, збільшуємо лічильник 
		end_:
		loop start_outer// закінчення зовнішнього циклу
	}
	cout << res << endl;
	return 0;
}
*/

